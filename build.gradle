import io.swagger.codegen.config.CodegenConfigurator
import io.swagger.codegen.DefaultGenerator

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.7.RELEASE")
        classpath('io.swagger:swagger-codegen:2.2.2')
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'

group = 'brian.template.boot'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
}

sourceSets {
}

configurations {
    generatedCompile

    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

sourceSets {
  generated {
    compileClasspath = configurations.generatedCompile
  }
  main {
    compileClasspath += generated.output
    runtimeClasspath += generated.output
  }
  test {
    compileClasspath += generated.output
    runtimeClasspath += generated.output
  }
  integrationTest {
    java {
        compileClasspath += main.output + test.output + generated.output
        runtimeClasspath += main.output + test.output + generated.output
        srcDir file('src/integrationTest/java')
    }
    resources {
        srcDirs 'src/integrationTest/resources'
    }
  }
}

dependencies {
	compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'io.springfox:springfox-swagger2:2.9.2'
    compile 'io.springfox:springfox-swagger-ui:2.9.2'   // Optional: Added this to see /swagger-ui.html

	testCompile 'org.springframework.boot:spring-boot-starter-test'

	generatedCompile 'org.springframework.boot:spring-boot-starter-data-rest'
    generatedCompile 'io.springfox:springfox-swagger2:2.9.2'

    integrationTestCompile 'org.springframework.boot:spring-boot-starter-test'
    integrationTestCompile 'org.assertj:assertj-core'
}

//======================= Tasks =============================================
defaultTasks 'clean', 'generateApi', 'cleanEclipse', 'eclipse',  'build', 'test', 'jacocoTestReport'

//>>>>>>>>>>> Eclipse Natures >>>>>>>>>>>>>>>>>>>>>>
eclipse {
    project{
        natures 'org.springsource.ide.eclipse.gradle.core.nature',
                'org.springframework.ide.eclipse.core.springnature',
                'org.eclipse.buildship.core.gradleprojectnature'
    }
}
//<<<<<<<<<<< Eclipse Natures <<<<<<<<<<<<<<<<<<<<<

//--- Swagger Code Gen ---------------------------------
def swaggerSourceFile = 'src/main/resources/person-swagger-api.json'
def swaggerTargetFolder = 'src/generated/java'
 
clean.doFirst {
  delete("${projectDir}/$swaggerTargetFolder")
}

task generateApi {
  doLast {
    def config = new CodegenConfigurator()
    config.setInputSpec("file:///$projectDir/$swaggerSourceFile")
    config.setOutputDir("$projectDir")
    config.setLang('spring')
    config.setAdditionalProperties([
        'interfaceOnly' : 'true',
        'apiPackage'    : 'brian.example.boot.rest.api',
        'modelPackage'  : 'brian.example.boot.rest.model',
        'sourceFolder'  : swaggerTargetFolder
    ])
    new DefaultGenerator().opts(config.toClientOptInput()).generate()
  }
}

bootRun {
    classpath += sourceSets.generated.output
}

jar {
    from sourceSets.generated.output
}

//>>>>>>>>>>> Jacoco HTML report generates >>>>>>>>>>>>>>>
jacocoTestReport {
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/BootTemplateRestApi2Application*'])
        })
    }
}
//<<<<<<<<<<< Jacoco HTML report generates <<<<<<<<<<<<<<<<

//>>>>>>>>>>> Jacoco code coverage ratio check >>>>>>>>>>>>>>>
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.1
            }
            excludes = [
                    'brian.template.boot.rest.BootTemplateRestApi2Application'
            ]
        }
    }
}
//  To run coverage verification during the build and fail if it doesn't meet the requirement
check.dependsOn jacocoTestCoverageVerification
//<<<<<<<<<<< Jacoco code coverage ratio check <<<<<<<<<<<<<<<<

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

compileGeneratedJava.dependsOn generateApi
classes.dependsOn generatedClasses
compileJava.dependsOn compileGeneratedJava
